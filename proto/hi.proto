syntax = "proto3";
package rpc;

//该go_package选项定义包的导入路径，该路径将包含此文件的所有生成代码。Go 包名称将是导入路径的最后一个路径组件。
option go_package = "ad-service-rpc/pb;pb";

service Greeter {
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}
}

message HelloRequest {
  string name=1;
}

message HelloReply {
  string message=2;
}



/** 在ad-service-rpc目录下执行以下脚本生成go文件

protoc --go_out=. --go_opt=paths=source_relative \
    --go-grpc_out=. --go-grpc_opt=paths=source_relative \
    hi/hi.proto

protoc 参数解释
——IPATH, --proto_path=PATH 搜索路径参数
  表示我们要在哪个路径下搜索 .proto 文件，这个参数可以用 -I 指定，也可以用 --proto_path= 指定。如果不指定该参数，则默认在当前路径下进行搜索；另外该参数可以指定多次，这也意味着我们可以搜索多个路径

--go_out= 指定生成的pb文件存储路径
--go_opt= 执行生成的pb文件存储方式
  1. paths=source_relative 表示按照 proto源文件的目录层级去创建Go代码的目录层级，如果目录已存在则不用创建。
  2. paths=import:. 默认import 表示按照go_package的全路径创建目录层级
 */




